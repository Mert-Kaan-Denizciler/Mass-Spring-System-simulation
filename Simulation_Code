"""
Normal Modes of Mass-Spring System with Non-Uniform Spring Constants
Authors: Group 5 members

This simulation models a mass-spring system.
The leftmost and rightmost masses are considered rigid walls.
Modelling method: Semi-Implicit Euler (Euler-Cromer)

Variables you can change:
n = number of masses (exluding walls)
k = list of spring constants
m = list of masses (excluding walls)
T = simulation ending time
dt = time steps
x_init, v_init = lists of initial conditions (excluding walls)
(all initial conditions are 0 by default)

Variables used in computation:
s = number of steps
t = time variable
x = displacement of mass i at time t (2D array filled with zeros)
v = velocity of mass i at time t (2D array filled with zeros)
F = force
a = acceleration
E = total energy in the system

x[0] = x[n+1] = v[0] = v[n+1] = 0  (boundary conditions)
"""

import matplotlib.pyplot as plt #This draws a graph
import numpy as np              #This makes arrays faster
from numpy import random

# Running time is O(n*T/dt)(not sure?)
# The Sampling theorem is important (This tells us how small dt must be, but I don't fully understand it.)
n = 3
m = [10]*(n)  # Small m can lead to a crash 
T = 1000     # Larger T makes PSD more accurate
dt = 1
k = [1]*(n+1) # Large k can lead to crash

# This makes the spring constants alternate between 1 and 5
# The emergence of acoustic and optical bands can be seen in the PDS
def alternating_k():    
    for i in range(1,n+1,2):
        k[i] = 10
    return 0


# This makes the spring constants a random number from 1 to 10 inclusive
# Usually, localization can be observed by zooming into the x vs t graph
# localization means all the energy ends up in just a few masses (usually 2)
def random_k():
    for i in range(0,n+1):
        k[i]=np.random.randint(1,11)
        
#alternating_k()
#random_k()
print("spring constants =",k)


s = int(T/dt)
# These are the 2D arrays (n+2 by s) filled with zeros (including walls)
# "+2" accounts for the two walls
x = np.zeros((n+2,s))
v = x.copy()

# (NOT YET IMPLEMENTED) This is the total energy at time t. We must check wheter E changes too much.
# And possibbly change the simulation methhod to fix it. 
#E = np.zeros(s)

x[1][0]=10 # We need a perturbation to get the system moving

print("steps =",s)


for t in range(1,s): 
    for i in range(1,n+1):
        
        change1=(x[i][t-1]-x[i-1][t-1]) # change in lenght of spring i-1
        change2=(x[i][t-1]-x[i+1][t-1]) # change in lenght of spring i
                        
        F_1 = -k[i-1]*change1   # force between masses i and i-1
        F_2 = -k[i]*change2      # force between masses i and i+1
        
        F = F_1+F_2 # total force on mass i
        a=F/m[i-1] 
        # It is important that we first calculate the velocity rather than the position.
        # This is because we use an explicit method (Forward Euler method) to calculate velocity,
        # Whereas we use an implicit method (Backward Euler) to calculate the position.
        # Together, this is called the Semi-implicit Euler method.
        # This method preserves energy for oscillatory systems. (Runge-Kutta 2 or Verlet methods might be better, each one preserves something different, need to check)
        
        v[i][t]=v[i][t-1]+a*dt         # We calcute v at time t by condering only the forces present at t-1
        x[i][t]=x[i][t-1]+v[i][t]*dt   # To calculate x at t, we consider the v at t, instead of at t-1


fig, (ax1, ax2) = plt.subplots(2) # Create two graphs

for i in range(1,n+1):
    ax1.plot(x[i],label=str(i))
ax1.set_title("Displacement vs Time")

ax1.legend()

# Compute the Power Spectral Density and plot it
# (I have no clue about how this PSD thing works, but it works really well. We should explain the theory a little bit.)
ax2.psd(x[1],T,1/dt)

plt.show()

# (NOT YET IMPLEMENTED) We make a 2D animation, using some(?) library about animations
